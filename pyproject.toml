[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"
# https://docs.astral.sh/uv/concepts/projects/config/#build-systems
# https://docs.astral.sh/uv/concepts/projects/config/#build-isolation

[tool.setuptools]
package-dir = {"" = "."}
# packages = ["xgym"]

# Discover all packages under xgym/
[tool.setuptools.packages.find]
include = ["xgym*"]

# Include non-.py files if you have them
[tool.setuptools.package-data]
xgym = [
"py.typed", "**/*.yaml", "**/*.yml", "**/*.json", "**/*.txt", "**/*.so", "**/*.pyd",
"**/*.urdf", "**/*.stl",
]


[project]
name = "xgym"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "arm-pytorch-utilities>=0.4.3",
    "av>=14.3.0",
    "colorama>=0.4.6",
    "ffmpeg>=1.4",
    "flax>=0.10.6",
    "gymnasium>=0.29.1",
    "imageio[ffmpeg]>=2.37.0",
    "jax>=0.5.3",
    "mlcroissant>=1.0.17",
    "numpy>=1.23.5",
    "opencv-python>=4.11.0.86",
    "opencv-python-headless>=4.11.0.86",
    "pupil-apriltags>=1.0.4.post11",
    "pygame>=2.6.1",
    "pynput>=1.8.1",
    "pytorch-kinematics>=0.7.0", # 0.7.5 ?
    "pytransform3d>=3.14.0",
    "rich>=14.0.0",
    "torch>=2.6.0",
    "tyro>=0.9.0",
    "webpolicy",
    "xacro>=1.13.3",
    # envlogger[tfds]
    # bsuite
]

[project.optional-dependencies]
ctrl = [
    "gello>=0.0.1",
    "pyrealsense2>=2.56.5.9235",
    "pyspacemouse>=1.1.4",
    "pyudev>=0.24.3",
    "pyzmq>=26.4.0",
    "xarm-python-sdk>=1.15.1",
]
data = []
dev = [
    "pre-commit>=4.2.0",
]

[tool.uv.sources]
gello = { git = "https://github.com/wuphilipp/gello_software.git" }
xarm-python-sdk = { git = "https://github.com/xArm-Developer/xArm-Python-SDK.git" }
webpolicy = { git = "http://github.com/mhyatt000/webpolicy" }

[tool.ruff]
target-version = "py311"
line-length = 120

[tool.ruff.lint]
# https://docs.astral.sh/ruff/rules/
select = [  # list of rule codes Ruff should check
    "E",    # pycodestyle (includes E4/E7; whitespace/statement/import style)
    "W",    # pycodestyle whitespace-specific rules
    "F",    # pyflakes (undefined names, unused vars/imports, etc.)
    "I",    # isort (import sorting/merging)
    "UP",   # pyupgrade: modernize syntax based on target-version
    "C4",   # flake8-comprehensions: prefer comprehensions / remove redundant wrappers
    "SIM",  # flake8-simplify: simplify boolean logic / control flow
    "PIE",  # flake8-pie: small safe cleanups & niceties
    "PERF", # perflint: safe micro-optimizations
    "ISC",  # implicit string concatenation checks (see ignore for ISC001)
    "RUF",  # Ruff-specific rules (e.g., remove unused `# noqa`)
    #
    "T10",  # flake8-debugger: breakpoint()/pdb/ipdb/etc.
    "T20",  # flake8-print: print()/pprint()
]
ignore = [ # exceptions to select
    "E741",   # ambiguous variable name (like l, O, I)
    "F841",   # assigned but unused variable
    "F821",   # undefined name
    "E731",   # do not assign a lambda (style preference)
    "E722",   # do not use bare except (style preference)
    # "E402", # module import not at top of file
    "E501",   # line too long (let the formatter handle wrapping)
    "UP035",
    "UP015", #  Unnecessary mode argument open('r') -> open()
    "UP031", # Use format specifiers instead of percent format
    #
    "F722",   # Conflicts with array typing.
    "T201",   # We use print statements.
    "PD008",  # Lots of false positives.
    "ISC001", # Disabling to support ruff format.
    #
    "RUF009", # Do not perform function call in dataclass defaults
    "T203", # We use print statements.
    # "RUF059", # Unpacked variable is never used
    "PIE796", # Enum contains duplicate value:
]
# whitelist potentially 'unsafe' linter fixes
fixable = [
    "I", "W", "E4", "E7",
    "F401",   # unused imports
    "F541", # f-string without any placeholders
    "UP006",  # Use `list` instead of `List` for type annotation
    "UP007",  # Use `X | Y` for type annotations
    "UP045",  # Use `X | None` for type annotations
    "UP028", # Replace `yield` over `for` loop with `yield from`
    "UP037", # Remove quotes from type annotation
    "C4",     # comprehension cleanups
    "SIM",    # simplify obvious boolean/control-flow patterns
    "SIM113", # Use `enumerate()` for index variable `i` in `for` loop
    "PIE",    # tiny safe cleanups
    "PERF",   # safe micro-optimizations
    "RUF100", # remove unused `# noqa`
    "RUF001", # String contains ambiguous `â€“` (EN DASH). Did you mean `-` (HYPHEN-MINUS)?
    "B",    # flake8-bugbear: likely bugs / risky patterns
    "PTH",  # flake8-use-pathlib: prefer pathlib.Path over os.path/open
]
unfixable = [] # blacklist linter fixes

[tool.ruff.lint.per-file-ignores]
"**/__init__.py" = ["F401"] # allow unused imports in top-level __init__.py
"tests/**"       = ["T201","T203"] # allow print/pprint in tests

[tool.ruff.lint.isort]
order-by-type = false
force-single-line = false
force-sort-within-sections = true
single-line-exclusions = ["collections.abc", "typing", "typing_extensions"]
required-imports = ["from __future__ import annotations"]

[tool.pyright]
typeCheckingMode = "basic"
reportMissingTypeStubs = false
exclude = ["**/build","**/.venv","**/data"]

[tool.pytest.ini_options]
addopts = "-q --maxfail=1 --disable-warnings"
testpaths = ["tests"]

[tool.coverage.run]
source = ["crossformer"]
branch = true

[tool.coverage.report]
fail_under = 80
show_missing = true
